%derive<Show> Token
%derive<Show> ParseError
%position<Position>
%start start

%token <Char_literal> CHAR
%token <String> INT
%token <Byte_literal> BYTE
%token <Bytes_literal> BYTES
%token <String> FLOAT
%token <String_literal> STRING
%token <String> MULTILINE_STRING
%token <Interp_literal> MULTILINE_INTERP
%token <Interp_literal> INTERP
%token <String> ATTRIBUTE
%token <String> LIDENT
%token <String> UIDENT
%token <String> POST_LABEL
%token <Comment> COMMENT
%token NEWLINE
%token <String> INFIX1
%token <String> INFIX2
%token <String> INFIX3
%token <String> INFIX4
%token <String> AUGMENTED_ASSIGNMENT

%token EOF
%token FALSE
%token TRUE
%token PUB             "pub"
%token PRIV            "priv"
%token READONLY        "readonly"
%token IMPORT          "import"
%token EXTERN          "extern"
%token BREAK           "break"
%token CONTINUE        "continue"
%token STRUCT          "struct"
%token ENUM            "enum"
%token TRAIT           "trait"
%token DERIVE          "derive"
%token IMPL            "impl"
%token WITH            "with"
%token RAISE           "raise"
%token THROW           "throw"
%token TRY             "try"
%token CATCH           "catch"
/* %token EXCEPT          "except" */
%token ASYNC           "async"
%token TYPEALIAS       "typealias"
%token TRAITALIAS      "traitalias"
%token EQUAL           "="

%token LPAREN          "("
%token RPAREN          ")"

%token COMMA          ","
%token MINUS           "-"
%token QUESTION        "?"
%token EXCLAMATION     "!"

%token <String>DOT_LIDENT
%token <String>DOT_UIDENT
%token <Int>DOT_INT
%token COLONCOLON      "::"
%token COLON           ":"
%token <Bool>SEMI
%token LBRACKET        "["
%token PLUS           "+"
%token RBRACKET       "]"

%token UNDERSCORE      "_"
%token BAR             "|"

%token LBRACE          "{"
%token RBRACE          "}"

%token AMPERAMPER     "&&"
%token AMPER     "&"
%token CARET     "^"
%token BARBAR          "||"
%token <String>PACKAGE_NAME
/* Keywords */

%token AS              "as"
%token PIPE            "|>"
%token ELSE            "else"
%token FN            "fn"
%token IF             "if"
%token LET            "let"
%token CONST          "const"
%token MATCH          "match"
%token MUTABLE        "mut"
%token TYPE            "type"
%token FAT_ARROW       "=>"
%token THIN_ARROW      "->"
%token WHILE           "while"
%token RETURN          "return"
%token DOTDOT          ".."
%token RANGE_INCLUSIVE "..="
%token RANGE_EXCLUSIVE "..<"
%token ELLIPSIS        "..."
%token TEST            "test"
%token LOOP            "loop"
%token GUARD           "guard"

%token FOR             "for"
%token IN              "in"
%token IS              "is"

%%

start : EOF { $1 };

%%

fn footer() -> Unit {
  ()
}

fn init {
  ignore(footer)
}